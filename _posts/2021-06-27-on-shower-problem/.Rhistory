import os
import numpy as np
from scipy import stats
import seaborn as sns
import pandas as pd
from tqdm import tqdm
shower_url = 'https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/raw/ad1709938834d7bc88b62ff0763733502eb6a329/shower_problem_tau_samples.csv'
test = pd.read_csv(shower_url)
test.head()
def simulate(direction, tau, init_wait, lam, k, flips=0, total_time=0):
samples = stats.weibull_min.rvs(1.5, scale=50, size=1000)
while True:
wait = init_wait + samples[flips]
if direction and tau < wait:
return flips, total_time + tau
# change direction
direction = not direction
init_wait = wait
total_time += wait
flips += 1
simulate(direction=1, tau=50, init_wait=0, lam=50, k=1.5)
def simulate(direction, tau, init_wait, lam, k, flips=0, total_time=0):
return 1
simulate(direction=1, tau=50, init_wait=0, lam=50, k=1.5)
def simulate(direction, tau, init_wait, lam, k, flips=0, total_time=0):
samples = stats.weibull_min.rvs(1.5, scale=50, size=1000)
while True:
wait = init_wait + samples[flips]
if direction and tau < wait:
return flips, total_time + tau
# change direction
direction = not direction
init_wait = wait
total_time += wait
flips += 1
simulate(direction=1, tau=50, init_wait=0, lam=50, k=1.5)
def run_simulations(df, func, **kwargs):
res = []
samples = zip(df['direction'], df['tau'])
for direction, tau in samples:
flips, total_time = func(direction, tau, **kwargs)
res.append((flips, total_time))
return np.transpose(res)
flips, total_time = run_simulations(test, simulate, init_wait=0, lam=50, k=1.5)
flips.mean(), total_time.mean()
train = test.copy().sample(1000)
train['tau'] = stats.weibull_min.rvs(1.5, scale=50, size=len(train))
low, high = stats.weibull_min.ppf([0.05, 0.95], 1.5, scale=50).astype(int)
init_waits = list(range(low, high))
time = []
for init_wait in tqdm(init_waits):
flips, total_time = run_simulations(train, simulate, init_wait=init_wait, lam=50, k=1.5)
time.append(total_time.mean())
quit
train = test.copy().sample(1000)
train['tau'] = stats.weibull_min.rvs(1.5, scale=50, size=len(train))
low, high = stats.weibull_min.ppf([0.05, 0.95], 1.5, scale=50).astype(int)
init_waits = list(range(low, high))
time = []
for init_wait in tqdm(init_waits):
flips, total_time = run_simulations(train, simulate, init_wait=init_wait, lam=50, k=1.5)
time.append(total_time.mean())
quit
train = test.copy().sample(1000)
train['tau'] = stats.weibull_min.rvs(1.5, scale=50, size=len(train))
low, high = stats.weibull_min.ppf([0.05, 0.95], 1.5, scale=50).astype(int)
init_waits = list(range(low, high))
time = []
for init_wait in tqdm(init_waits):
flips, total_time = run_simulations(train, simulate, init_wait=init_wait, lam=50, k=1.5)
time.append(total_time.mean())
sns.regplot(x=init_waits, y=time, lowess=True);
train = test.copy().sample(1000)
train['tau'] = stats.weibull_min.rvs(1.5, scale=50, size=len(train))
low, high = stats.weibull_min.ppf([0.05, 0.95], 1.5, scale=50).astype(int)
init_waits = list(range(low, high))
time = []
for init_wait in tqdm(init_waits):
flips, total_time = run_simulations(train, simulate, init_wait=init_wait, lam=50, k=1.5)
time.append(total_time.mean())
sns.regplot(x=init_waits, y=time, lowess=True);
shower_url = 'https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/raw/ad1709938834d7bc88b62ff0763733502eb6a329/shower_problem_tau_samples.csv'
test = pd.read_csv(shower_url)
test.head()
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/',
'shower_problem_tau_samples.csv')
test = pd.read_csv(shower_url)
test.head()
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/',
'shower_problem_tau_samples.csv')
test = pd.read_csv(shower_url)
test.head()
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/,
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/',
'shower_problem_tau_samples.csv')
test = pd.read_csv(shower_url)
test.head()
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/,
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/,
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/',
'shower_problem_tau_samples.csv')
test = pd.read_csv(shower_url)
test.head()
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/'
'shower_problem_tau_samples.csv')
test = pd.read_csv(shower_url)
test.head()
shower_url = ('https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/'
'shower_problem_tau_samples.csv')
test = pd.read_csv(shower_url)
test.head()
shower_url = 'https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/' \
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/' \
'shower_problem_tau_samples.csv'
test = pd.read_csv(shower_url)
test.head()
shower_url = 'https://gist.github.com/csaid/a57c4ebaa1c7b0671cdc9692638ea4c4/' \
'raw/ad1709938834d7bc88b62ff0763733502eb6a329/' \
'shower_problem_tau_samples.csv'
test = pd.read_csv(shower_url)
test.head()
train = test.copy().sample(1000)
train['tau'] = stats.weibull_min.rvs(1.5, scale=50, size=len(train))
low, high = stats.weibull_min.ppf([0.05, 0.95], 1.5, scale=50).astype(int)
init_waits = list(range(low, high))
time = []
for init_wait in init_waits:
flips, total_time = run_simulations(train, simulate, init_wait=init_wait,
lam=50, k=1.5)
time.append(total_time.mean())
sns.regplot(x=init_waits, y=time, lowess=True)
def run_simulations(df, func, **kwargs):
res = []
samples = zip(df['direction'], df['tau'])
for direction, tau in samples:
flips, total_time = func(direction, tau, **kwargs)
res.append((flips, total_time))
return np.transpose(res)
flips, total_time = run_simulations(test, simulate, init_wait=0,
lam=50, k=1.5)
flips.mean(), total_time.mean()
knitr::opts_chunk$set(echo = FALSE)
reticulate::repl_python()
